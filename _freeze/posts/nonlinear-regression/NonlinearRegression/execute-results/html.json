{
  "hash": "f97a9eacf926780b02ae3e0f7beb7ed2",
  "result": {
    "markdown": "---\ntitle: What is Nonlinear Regression?\n---\n\nNonlinear, like linear regression tries to model a relation between independent and dependent variables using a function. However, linear regression follows a traditional y=mx+b line graph, while nonlinear relations can have more complex functions of different orders. Some example functions are quadratic, exponential, logistic, logarithmic, etc. To find the fitness of the nonlinear regression model, a sum of squares is used (calculating the difference of the mean of the data and each point). Use cases for nonlinear regression consist of any time of nonlinear data, such as population growth over time, stock market forecasting, etc. \n\n\n### Some types of Nonlinear Regression ###\n\n### Quadratic ###\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef quadratic(x, a, b, c):\n    return a * x**2 + b * x + c\n\nx = np.linspace(-10, 10, 100)\n\na = 1\nb = 2\nc = 1\n\ny = quadratic(x, a, b, c)\n\nnum_points = 50\nrandX = np.random.uniform(-8, 8, num_points)\nrandY = quadratic(randX, a, b, c) + np.random.normal(0, 5, num_points)\n\nplt.plot(x, y)\nplt.scatter(randX, randY, color='red', label='Random Data Points')\n\nplt.title('Quadratic Function with Scatter Plot')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.axhline(0, color='k', linewidth=0.5)\nplt.axvline(0, color='k', linewidth=0.5)\nplt.grid(color='y', linestyle='--', linewidth=0.5)\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](NonlinearRegression_files/figure-html/cell-2-output-1.png){width=593 height=449}\n:::\n:::\n\n\n### Exponential ####\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef exponential(x, a, b):\n    return a * np.exp(b * x)\n\nx = np.linspace(-10, 10, 100)\n\na = 2\nb = 1\n\ny = exponential(x, a, b)\n\nnum_points = 50\nrandX = np.random.uniform(-8, 8, num_points)\nrandY = exponential(randX, a, b) + np.random.normal(0, 5, num_points)\n\nplt.plot(x, y)\nplt.scatter(randX, randY, color='red', label='Random Data Points')\n\nplt.title('Exponential Function with Scatter Plot')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.axhline(0, color='k', linewidth=0.5)\nplt.axvline(0, color='k', linewidth=0.5)\nplt.grid(color='y', linestyle='--', linewidth=0.5)\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](NonlinearRegression_files/figure-html/cell-3-output-1.png){width=610 height=449}\n:::\n:::\n\n\n### Logistic ###\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef logistic(x, a, b):\n    return 1 / (1 +np.exp(-a*(x-b)))\n\nx = np.linspace(-10, 10, 100)\n\na = 1\nb = 2\n\ny = logistic(x, a, b)\n\nnum_points = 50\nrandX = np.random.uniform(-8, 8, num_points)\nrandY = logistic(randX, a, b) + np.random.normal(0, 5, num_points)\n\nplt.plot(x, y)\nplt.scatter(randX, randY, color='red', label='Random Data Points')\n\nplt.title('Logistic Function with Scatter Plot')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.axhline(0, color='k', linewidth=0.5)\nplt.axvline(0, color='k', linewidth=0.5)\nplt.grid(color='y', linestyle='--', linewidth=0.5)\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](NonlinearRegression_files/figure-html/cell-4-output-1.png){width=587 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef logarithmic(x, a, b):\n    return a * np.log(x) + b\n\nx = np.linspace(0.1, 10, 100)\n\na = 2\nb = 1\n\ny = logarithmic(x, a, b)\n\nnum_points = 50\nrandX = np.random.uniform(0.1, 8, num_points)\nrandY = logarithmic(randX, a, b) + np.random.normal(0, 5, num_points)\n\nplt.plot(x, y)\nplt.scatter(randX, randY, color='red', label='Random Data Points')\n\nplt.title('Logarithmic Function with Scatter Plot')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.axhline(0, color='k', linewidth=0.5)\nplt.axvline(0, color='k', linewidth=0.5)\nplt.grid(color='y', linestyle='--', linewidth=0.5)\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](NonlinearRegression_files/figure-html/cell-5-output-1.png){width=600 height=449}\n:::\n:::\n\n\n### World GDP Dataset ###\nFor this nonlinear regression analysis we will use a dataset of World GDP over time. The data just shows how World GDP changed every year and we can use some form of nonlinear regression to predict how it will be in the future. Nonlinear regression is great for time series data. This dataset is publicly available.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.read_csv('Worldgdp.csv')\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>GDP</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>66.000000</td>\n      <td>6.600000e+01</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1982.500000</td>\n      <td>4.328561e+13</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>19.196354</td>\n      <td>2.776368e+13</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1950.000000</td>\n      <td>9.250000e+12</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1966.250000</td>\n      <td>1.987500e+13</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1982.500000</td>\n      <td>3.630000e+13</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1998.750000</td>\n      <td>5.970000e+13</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2015.000000</td>\n      <td>1.080000e+14</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.regplot(df, x='Year', y='GDP')\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<Axes: xlabel='Year', ylabel='GDP'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](NonlinearRegression_files/figure-html/cell-7-output-2.png){width=589 height=443}\n:::\n:::\n\n\nAs we can see, linear regression doesn't show a good prediction of future GDP so we need to use one of the nonlinear regression functions. Just intuitively from the graph, we can see that a logistic function will probably fit the function closely. We can use scipy to optimize the function.\n\ndef logistic(x, a, b):\n    return 1 / (1 +np.exp(-a*(x-b)))\n\nY_pred = logistic(df['Year'], 0.1 , 2000)\nplt.plot(df['Year'], Y_pred*1e14)\nplt.plot(df['Year'], df['GDP'], 'g.')\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom scipy.optimize import curve_fit\nxVals = df['Year'] / max(df['Year'])\nyVals = df['GDP'] / max(df['GDP'])\n(a, b), _ = curve_fit(logistic, xVals, yVals)\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nx = np.linspace(min(df['Year']), max(df['Year']))\nx /= max(x)\ny = logistic(x, a, b)\nplt.plot(xVals* max(df['Year']), yVals*max(df['GDP']), 'g.')\nplt.plot(x*max(df['Year']),y*max(df['GDP']), linewidth=2.0)\nplt.ylabel('World GDP')\nplt.xlabel('Year')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](NonlinearRegression_files/figure-html/cell-9-output-1.png){width=589 height=443}\n:::\n:::\n\n\nWe can intuitively see that scipy managed to fit the logistic function appropriately with our data and it resembles pretty closely\n\nLets predict world GDP in 2030 using the nonlinear regression model\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n(logistic([2035/max(df['Year'])], a, b) * 1e14)[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n94677239359468.88\n```\n:::\n:::\n\n\n",
    "supporting": [
      "NonlinearRegression_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}